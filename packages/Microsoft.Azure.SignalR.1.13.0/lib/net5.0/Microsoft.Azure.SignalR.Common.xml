<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.SignalR.Common</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Azure.SignalR.DefaultMessageRouter.GetEndpointsForBroadcast(System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Broadcast to all available endpoints including online and offline, when the endpoint is offline, there is a need to notify user about it because there is potential message loss
            </summary>
            <param name="endpoints"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.DefaultMessageRouter.GetEndpointsForUser(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Broadcast to all available endpoints including online and offline, when the endpoint is offline, there is a need to notify user about it because there is potential message loss
            </summary>
            <param name="userId"></param>
            <param name="endpoints"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.DefaultMessageRouter.GetEndpointsForGroup(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Broadcast to all available endpoints including online and offline, when the endpoint is offline, there is a need to notify user about it because there is potential message loss
            </summary>
            <param name="groupName"></param>
            <param name="endpoints"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.DefaultMessageRouter.GetEndpointsForConnection(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Broadcast to all available endpoints including online and offline, when the endpoint is offline, there is a need to notify user about it because there is potential message loss
            Note that this one is only called when the SDK is not able to identify where the connectionId is.
            When the outcoming connectionId happens to be also connected to this app server, SDK can directly send the messages back to that connectionId
            </summary>
            <param name="connectionId"></param>
            <param name="endpoints"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IMessageRouter.GetEndpointsForBroadcast(System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Get the service endpoints for broadcast message to send to
            </summary>
            <param name="endpoints">All the available endpoints</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IMessageRouter.GetEndpointsForUser(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Get the service endpoints for the specified user to send to
            </summary>
            <param name="userId">The id of the user</param>
            <param name="endpoints">All the available endpoints</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IMessageRouter.GetEndpointsForGroup(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Get the service endpoints for the specified group to send to
            </summary>
            <param name="groupName">The name of the group</param>
            <param name="endpoints">All the available endpoints</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IMessageRouter.GetEndpointsForConnection(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.SignalR.ServiceEndpoint})">
            <summary>
            Get the service endpoints for the specified connection to send to
            Note that this one is only called when the SDK is not able to identify where the connectionId is.
            When the outcoming connectionId happens to be also connected to this app server, SDK can directly send the messages back to that connectionId
            </summary>
            <param name="connectionId">The id of the connection</param>
            <param name="endpoints">All the available endpoints</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.AccessKeySynchronizer.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)">
            <summary>
            For test only.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.EndpointMetrics.ClientConnectionCount">
            <summary>
            <see cref="T:Microsoft.Azure.SignalR.ServiceEndpoint" /> total concurrent client connection count on all hubs.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.HubServiceEndpoint.ScaleTask">
            <summary>
            Task waiting for HubServiceEndpoint turn ready when live add/remove endpoint
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IConfigurationExtension.GetEndpoints(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <param name="configuration"></param>
            <param name="sectionName"></param>
        </member>
        <member name="T:Microsoft.Azure.SignalR.ServerStickyMode">
            <summary>
            Specifies the mode for server sticky, when client is always routed to the server which it first /negotiate with, we call it "server sticky mode".
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.ServerStickyMode.Disabled">
            <summary>
            We the server sticky mode is disabled, it picks the server connection by some algorithm
            In general, local server connection first
            least client connections routed server connection first
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.ServerStickyMode.Required">
            <summary>
            We will try to find the server it /negotiate with from both local and global route table, it the server is not connected, throw,
            If it is globally routed, this request will be always globally routed
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ServiceEndpoint.Online">
            <summary>
            When current app server instance has server connections connected to the target endpoint for current hub, it can deliver messages to that endpoint.
            The endpoint is then considered as *Online*; otherwise, *Offline*.
            Messages are not able to be delivered to an *Offline* endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ServiceEndpoint.IsActive">
            <summary>
            When the target endpoint has hub clients connected, the endpoint is considered as an *Active* endpoint.
            When the target endpoint has no hub clients connected for 10 minutes, the endpoint is considered as an *Inactive* one.
            User can choose to not send messages to an *Inactive* endpoint to save network traffic.
            But please note that as the *Active* status is reported to the server from remote service, there can be some delay when status changes.
            Don't rely on this status if you don't expect any message lose once a client is connected.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ServiceEndpoint.EndpointMetrics">
            <summary>
            Enriched endpoint metrics for customized routing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceEndpoint.#ctor(System.String,System.String)">
            <summary>
            Connection string constructor with nameWithEndpointType
            </summary>
            <param name="nameWithEndpointType"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceEndpoint.#ctor(System.String,Microsoft.Azure.SignalR.EndpointType,System.String)">
            <summary>
            Connection string constructor
            </summary>
            <param name="connectionString"></param>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceEndpoint.#ctor(System.String,System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Azure active directory constructor with nameWithEndpointType
            </summary>
            <param name="nameWithEndpointType"></param>
            <param name="endpoint"></param>
            <param name="credential"></param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceEndpoint.#ctor(System.Uri,Azure.Core.TokenCredential,Microsoft.Azure.SignalR.EndpointType,System.String)">
            <summary>
            Azure active directory constructor
            </summary>
            <param name="endpoint"></param>
            <param name="credential"></param>
            <param name="endpointType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceEndpoint.#ctor(Microsoft.Azure.SignalR.ServiceEndpoint)">
            <summary>
            Copy constructor with no exception
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenNotAuthorizedException">
            <summary>
            The exception throws when AccessKey is not authorized.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenNotAuthorizedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenNotAuthorizedException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenTooLongException">
            <summary>
            The exception thrown when AccessToken is too long.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenTooLongException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenTooLongException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRAccessTokenTooLongException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRNotConnectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRNotConnectedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.AzureSignalRNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.AzureSignalRNotConnectedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.ServiceConnectionNotActiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.SignalR.Common.ServiceConnectionNotActiveException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.Common.BackOffPolicy.CallProbeWithBackOffAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Int32,System.TimeSpan})">
            <summary>
            Provides a synchronized mechanism of calling probing funcs by multiple concurrent callers.
            Each caller's probe func will be invoked exactly one time.
            The probe call may get delayed depending on the result of previous probe calls.
            The delay is controlled by getRetryDelay func and the number of consecutive failed probe calls.
            </summary>
            <param name="probe"> this func returns a task with boolean result indicating if the probe was successful</param>
            <param name="getRetryDelay"> this func returns a TimeSpan delay for a given iteration number</param>
            <returns> 
            A task with its final state and result matching the state and result of the task returned by the probe func.
            This task will completes after either of the following happens:
            - probe's task changes state to task.IsCompletedSuccessfully == true and task.Result == true
            - probe's task.Result == false / faulted / cancelled and the delay defined by getRetryDelay has passed
            </returns>
        </member>
        <member name="T:Microsoft.Azure.SignalR.HealthApi">
            <summary>
            HealthApi operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.HealthApi.#ctor(Microsoft.Azure.SignalR.SignalRServiceRestClient)">
            <summary>
            Initializes a new instance of the HealthApi class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.SignalR.HealthApi.Client">
            <summary>
            Gets a reference to the SignalRServiceRestClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.HealthApi.GetHealthStatusWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get service health status.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.SignalR.HealthApiExtensions">
            <summary>
            Extension methods for HealthApi.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.HealthApiExtensions.GetHealthStatus(Microsoft.Azure.SignalR.IHealthApi)">
            <summary>
            Get service health status.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.HealthApiExtensions.GetHealthStatusAsync(Microsoft.Azure.SignalR.IHealthApi,System.Threading.CancellationToken)">
            <summary>
            Get service health status.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.SignalR.IHealthApi">
            <summary>
            HealthApi operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.IHealthApi.GetHealthStatusWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get service health status.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
        </member>
        <member name="T:Microsoft.Azure.SignalR.ISignalRServiceRestClient">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ISignalRServiceRestClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ISignalRServiceRestClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ISignalRServiceRestClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ISignalRServiceRestClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.ISignalRServiceRestClient.HealthApi">
            <summary>
            Gets the IHealthApi.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.SignalRServiceRestClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.SignalRServiceRestClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.SignalRServiceRestClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.SignalRServiceRestClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.SignalRServiceRestClient.HealthApi">
            <summary>
            Gets the IHealthApi.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling SignalRServiceRestClient.Dispose(). False: will not dispose provided httpClient</param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling SignalRServiceRestClient.Dispose(). False: will not dispose provided httpClient</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the SignalRServiceRestClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.SignalR.SignalRServiceRestClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ConnectionFactory.GracefulLoggerFactory.GracefulLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Downgrade error level logs, and also exclude exception details
            Exceptions thrown from inside the HttpConnection are supposed to be handled by the caller and logged with more user-friendly message
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="T:Microsoft.Azure.SignalR.GracefulShutdownMode">
            <summary>
            This mode defines the server's behavior after receiving a `Ctrl+C` (SIGINT).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.GracefulShutdownMode.Off">
            <summary>
            The server will stop immediately, all existing connections will be dropped immediately.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.GracefulShutdownMode.WaitForClientsClose">
            <summary>
            We will immediately remove this server from Azure SignalR, 
            which means no more new connections will be assigned to this server,
            the existing connections won't be influenced until a default timeout (30s).
            Once all connections on this server are closed properly, the server stops.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.GracefulShutdownMode.MigrateClients">
             <summary>
             Similar to `WaitForClientsClose`, the server will be removed from Azure SignalR.
             But instead of waiting existing connections to close, we will try to migrate client connections to another valid server,
             which may save most of your connections during this process.
            
             It happens on the message boundaries, considering if each of your message consist of 3 packages. The migration will happen at here:
             
             | P1 - P2 - P3 | [HERE] | P4 - P5 - P6 |
             | Message 1    |        | Message 2    |
            
             We do this by finding message boundaries on-fly,
             For JSON protocol, we simply find seperators (,)
             For MessagePack protocol, we preserve the length header and count body length to determine if the message was finished.
             
             This mode always works well with context-free scenarios.
             Since the `connectionId` will not change before-and-after migration, 
             you may also benifit from this feature by using a distributed storage even if your scenario is not context-free.
             </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.Connections.Client.Internal.WebSocketsTransport">
            <summary>
            Copied from aspnetcore repo, TODO: refactor
            </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.MultiEndpointMessageWriter">
            <summary>
            A service connection container which sends message to multiple service endpoints.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.ClientConnectionScope">
            <summary>
            Represents a disposable scope able to carry connection properties along with the execution context flow
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.ServiceConnectionType.Default">
            <summary>
            0, Default, it can carry clients, service runtime should always accept this kind of connection
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.ServiceConnectionType.OnDemand">
            <summary>
            1, OnDemand, creating when service requested more connections, it can carry clients, but it may be rejected by service runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.SignalR.ServiceConnectionType.Weak">
            <summary>
            2, Weak, it can not carry clients, but it can send message
            </summary>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceConnectionBase.StartAsync(System.String)">
            <summary>
            Start a service connection without the lifetime management.
            To get full lifetime management including dispose or restart, use <see cref="T:Microsoft.Azure.SignalR.ServiceConnectionContainerBase"/>
            </summary>
            <param name="target">The target instance Id</param>
            <returns>The task of StartAsync</returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceConnectionContainerBase.StartCoreAsync(Microsoft.Azure.SignalR.IServiceConnection,System.String)">
            <summary>
            Start and manage the whole connection lifetime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.SignalR.ServiceConnectionContainerBase.CreateServiceConnectionCore(Microsoft.Azure.SignalR.ServiceConnectionType)">
            <summary>
            Create a connection for a specific service connection type
            </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.WebSocketConnectionContext">
            <summary>
            TODO: Implement Features
            </summary>
        </member>
        <member name="P:Microsoft.Azure.SignalR.WebSocketConnectionContext.ConnectionId">
            <summary>
            TODO: get from service handshake
            </summary>
        </member>
        <member name="T:Microsoft.Azure.SignalR.CancellationTokenExtensions">
            <summary>
            From https://github.com/dotnet/corefx/issues/2704#issuecomment-162370041
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ForceAsyncTaskExtensions.ForceAsync(System.Threading.Tasks.Task)">
            <summary>
            Returns an awaitable/awaiter that will ensure the continuation is executed
            asynchronously on the thread pool, even if the task is already completed
            by the time the await occurs.  Effectively, it is equivalent to awaiting
            with ConfigureAwait(false) and then queuing the continuation with Task.Run,
            but it avoids the extra hop if the continuation already executed asynchronously.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.WebSocketExtensions">
            <summary>
            Copied from aspnetcore
            </summary>
        </member>
    </members>
</doc>
